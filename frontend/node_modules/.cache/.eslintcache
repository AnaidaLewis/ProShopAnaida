[{"/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/index.js":"1","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/reportWebVitals.js":"2","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/store.js":"3","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/App.js":"4","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/reducers/productReducers.js":"5","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/reducers/cartReducers.js":"6","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/reducers/userReducers.js":"7","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/reducers/orderReducers.js":"8","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/components/Header.js":"9","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/screens/HomeScreen.js":"10","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/components/Footer.js":"11","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/screens/ProductScreen.js":"12","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/screens/ProfileScreen.js":"13","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/screens/PlaceOrderScreen.js":"14","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/screens/PaymentScreen.js":"15","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/screens/OrderScreen.js":"16","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/screens/RegisterScreen.js":"17","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/screens/LoginScreen.js":"18","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/screens/CartScreen.js":"19","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/screens/ShippingScreen.js":"20","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/screens/UserListScreen.js":"21","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/screens/OrderListScreen.js":"22","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/screens/ProductListScreen.js":"23","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/screens/ProductEditScreen.js":"24","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/screens/UserEditScreen.js":"25","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/components/Paginate.js":"26","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/components/SearchBox.js":"27","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/components/Loader.js":"28","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/components/Message.js":"29","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/components/Product.js":"30","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/components/ProductCarousel.js":"31","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/constants/productConstants.js":"32","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/constants/userConstants.js":"33","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/constants/cartConstants.js":"34","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/constants/orderConstants.js":"35","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/components/Rating.js":"36","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/components/FormContainer.js":"37","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/actions/userActions.js":"38","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/actions/productActions.js":"39","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/actions/orderActions.js":"40","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/actions/cartActions.js":"41","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/components/CheckoutSteps.js":"42"},{"size":634,"mtime":1661488603276,"results":"43","hashOfConfig":"44"},{"size":362,"mtime":1658837559371,"results":"45","hashOfConfig":"44"},{"size":2453,"mtime":1662229374530,"results":"46","hashOfConfig":"44"},{"size":2346,"mtime":1662232849681,"results":"47","hashOfConfig":"44"},{"size":4103,"mtime":1662229355188,"results":"48","hashOfConfig":"44"},{"size":1554,"mtime":1662010579286,"results":"49","hashOfConfig":"44"},{"size":4115,"mtime":1662128438892,"results":"50","hashOfConfig":"44"},{"size":4105,"mtime":1662230732012,"results":"51","hashOfConfig":"44"},{"size":2819,"mtime":1662232774317,"results":"52","hashOfConfig":"44"},{"size":1546,"mtime":1662229682421,"results":"53","hashOfConfig":"44"},{"size":328,"mtime":1660995019397,"results":"54","hashOfConfig":"44"},{"size":10529,"mtime":1662219795935,"results":"55","hashOfConfig":"44"},{"size":6872,"mtime":1662127151878,"results":"56","hashOfConfig":"44"},{"size":5164,"mtime":1662010096304,"results":"57","hashOfConfig":"44"},{"size":2467,"mtime":1661932302770,"results":"58","hashOfConfig":"44"},{"size":7959,"mtime":1662231142850,"results":"59","hashOfConfig":"44"},{"size":4198,"mtime":1662043938802,"results":"60","hashOfConfig":"44"},{"size":2719,"mtime":1661873334516,"results":"61","hashOfConfig":"44"},{"size":3561,"mtime":1661926555814,"results":"62","hashOfConfig":"44"},{"size":2727,"mtime":1661929708715,"results":"63","hashOfConfig":"44"},{"size":3318,"mtime":1662132260006,"results":"64","hashOfConfig":"44"},{"size":3252,"mtime":1662193518017,"results":"65","hashOfConfig":"44"},{"size":4684,"mtime":1662229150195,"results":"66","hashOfConfig":"44"},{"size":8436,"mtime":1662192258191,"results":"67","hashOfConfig":"44"},{"size":4658,"mtime":1662128369150,"results":"68","hashOfConfig":"44"},{"size":850,"mtime":1662228132747,"results":"69","hashOfConfig":"44"},{"size":1023,"mtime":1662226749599,"results":"70","hashOfConfig":"44"},{"size":420,"mtime":1661510620254,"results":"71","hashOfConfig":"44"},{"size":211,"mtime":1661786856551,"results":"72","hashOfConfig":"44"},{"size":949,"mtime":1661365670499,"results":"73","hashOfConfig":"44"},{"size":1423,"mtime":1662229622424,"results":"74","hashOfConfig":"44"},{"size":1502,"mtime":1662136471499,"results":"75","hashOfConfig":"44"},{"size":1478,"mtime":1661780183472,"results":"76","hashOfConfig":"44"},{"size":287,"mtime":1662010232223,"results":"77","hashOfConfig":"44"},{"size":1240,"mtime":1662004538264,"results":"78","hashOfConfig":"44"},{"size":1680,"mtime":1661264518594,"results":"79","hashOfConfig":"44"},{"size":346,"mtime":1661786836534,"results":"80","hashOfConfig":"44"},{"size":7396,"mtime":1662127605805,"results":"81","hashOfConfig":"44"},{"size":5940,"mtime":1662229399739,"results":"82","hashOfConfig":"44"},{"size":5989,"mtime":1662231445077,"results":"83","hashOfConfig":"44"},{"size":1311,"mtime":1661932220576,"results":"84","hashOfConfig":"44"},{"size":1361,"mtime":1661929627035,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},"llngx8",{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"89"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"89"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"89"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"89"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"89"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"89"},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"89"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"89"},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"89"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"89"},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"89"},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"89"},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"89"},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"89"},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"89"},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"211","messages":"212","suppressedMessages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"214","messages":"215","suppressedMessages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"89"},{"filePath":"218","messages":"219","suppressedMessages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"89"},{"filePath":"222","messages":"223","suppressedMessages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"89"},{"filePath":"226","messages":"227","suppressedMessages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"229","messages":"230","suppressedMessages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},"/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/index.js",[],[],[],"/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/reportWebVitals.js",[],[],"/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/store.js",[],[],"/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/App.js",[],[],"/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/reducers/productReducers.js",[],[],"/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/reducers/cartReducers.js",[],[],"/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/reducers/userReducers.js",[],[],"/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/reducers/orderReducers.js",[],[],"/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/components/Header.js",["232"],[],"import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Navbar, Nav, Container, Row, NavDropdown } from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport {logout} from '../actions/userActions'\nimport SearchBox from './SearchBox'\n\n\nfunction Header() {\n\n    const userLogin = useSelector(state => state.userLogin)\n    const {userInfo} = userLogin\n\n    const dispatch = useDispatch()\n\n    const logoutHandler = () => {\n        dispatch(logout())\n    }\n\n  return (\n    <header>\n        <Navbar bg=\"dark\" variant = \"dark\" expand=\"lg\" collapseOnSelect>\n            <Container fluid>\n                <LinkContainer to= '/'>\n                    <Navbar.Brand>ProShop</Navbar.Brand>\n                </LinkContainer>\n                \n                <Navbar.Toggle aria-controls=\"navbarScroll\" />\n                <Navbar.Collapse id=\"navbarScroll\">\n                    <SearchBox />\n                <Nav\n                    className=\"ms-auto my-2 my-lg-0\"\n                    style={{ maxHeight: '100px' }}\n                    navbarScroll\n                >\n                    <LinkContainer to= '/cart'>\n                        <Nav.Link><i className = \"fas fa-shopping-cart\"></i>Cart</Nav.Link>\n                    </LinkContainer>\n\n                    {userInfo ? (\n                    <NavDropdown title={userInfo.name} id='username'>\n                        <LinkContainer to='/profile'>\n                            <NavDropdown.Item>Profile</NavDropdown.Item>\n                        </LinkContainer>\n\n                        <NavDropdown.Item onClick={logoutHandler}>Logout</NavDropdown.Item>\n\n                    </NavDropdown>\n                    ) : (\n                        <LinkContainer to='/login'>\n                            <Nav.Link><i className=\"fas fa-user\"></i>Login</Nav.Link>\n                        </LinkContainer>\n                    )}\n\n\n                    {userInfo && userInfo.isAdmin && (\n                        <NavDropdown title='Admin' id='adminmenu'>\n                            <LinkContainer to='/admin/userlist'>\n                                <NavDropdown.Item>Users</NavDropdown.Item>\n                            </LinkContainer>\n\n                            <LinkContainer to='/admin/productlist'>\n                                <NavDropdown.Item>Products</NavDropdown.Item>\n                            </LinkContainer>\n\n                            <LinkContainer to='/admin/orderlist'>\n                                <NavDropdown.Item>Orders</NavDropdown.Item>\n                            </LinkContainer>\n\n\n                        </NavDropdown>\n                    )}\n\n                </Nav>\n\n                </Navbar.Collapse>\n            </Container>\n        </Navbar>\n    </header>\n  )\n}\n\nexport default Header\n","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/screens/HomeScreen.js",["233","234"],[],"import React, { useState, useEffect } from \"react\";\nimport {useDispatch, useSelector} from 'react-redux';\nimport { Row, Col } from \"react-bootstrap\";\nimport Product from \"../components/Product\";\nimport Loader from \"../components/Loader\";\nimport Message from \"../components/Message\";\nimport { listProducts } from \"../actions/productActions\";\nimport{useNavigate, useLocation} from 'react-router-dom'\nimport Paginate from '../components/Paginate'\nimport ProductCarousel from '../components/ProductCarousel'\n\n\nfunction HomeScreen() {\n  const dispatch = useDispatch()\n\n  const productList = useSelector(state => state.productList)\n  const{ error, loading, products,page,pages } = productList\n\n\n  const location = useLocation();\n\n  let keyword = location.search\n\n\n  useEffect(() => {\n    dispatch(listProducts(keyword))\n\n  }, [dispatch, keyword]);\n\n\n  return (\n    <div>\n        {!keyword && <ProductCarousel />}\n\n        <h1>Latest Products</h1>\n        {loading ? <Loader />\n            : error ? <Message variant='danger'>{error}</Message>\n                :\n                <div>\n                    <Row>\n                        {products.map(product => (\n                            <Col key={product.id} sm={12} md={6} lg={4} xl={3}>\n                                <Product product={product} />\n                            </Col>\n                        ))}\n                    </Row>\n                    <Paginate page={page} pages={pages} keyword={keyword} />\n                </div>\n            }\n    </div>\n  );\n}\n\nexport default HomeScreen;\n","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/components/Footer.js",[],[],"/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/screens/ProductScreen.js",["235","236"],[],"import React, {useState, useEffect} from 'react'\nimport { Link, useParams, useNavigate } from 'react-router-dom'\nimport {Row, Col, Image, ListGroup, Button, Card, Form } from 'react-bootstrap'\n\nimport { useDispatch,useSelector } from 'react-redux'\nimport {listProductDetails, createProductReview} from '../actions/productActions' \nimport { PRODUCT_CREATE_REVIEW_RESET } from '../constants/productConstants'\n\n\nimport Rating from '../components/Rating'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\n\n\nfunction ProductScreen() {\n\n    let navigate = useNavigate(); \n    const [qty, setQty] = useState(1)\n    const [rating, setRating] = useState(0)\n    const [comment, setComment] = useState('')\n\n    const {id} = useParams()\n    const dispatch = useDispatch()\n\n    const productDetails = useSelector(state => state.productDetails)\n    const{ error, loading, product } = productDetails\n    \n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n    const productReviewCreate = useSelector(state => state.productReviewCreate)\n    const {\n        loading: loadingProductReview,\n        error: errorProductReview,\n        success: successProductReview,\n    } = productReviewCreate\n\n    \n    useEffect(() => {\n\n        if (successProductReview) {\n            setRating(0)\n            setComment('')\n            dispatch({ type: PRODUCT_CREATE_REVIEW_RESET })\n        }\n\n      dispatch(listProductDetails(id))\n  \n    }, [dispatch, successProductReview]);\n  \n    \n    const addToCartHandler = () => {\n        let pathname = `/cart/${id}?qty=${qty}`\n        navigate(pathname)\n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(createProductReview(\n            id, \n            {\n            rating,\n            comment\n        }\n        ))\n    }\n\n    return (\n    <div>\n        <Link to = '/' className = 'btn btn-light my-3'>Go Back</Link>\n        \n        {\n        loading ? <Loader /> \n            : error ? <Message variant = 'danger' childern={error}/> \n                :\n                (\n                <div>\n                    <Row>\n                        <Col md = {6}>\n                            <Image src = {product.image} alt = {product.name} fluid/>\n                        </Col>\n                        <Col md = {3}>\n                            <ListGroup variant = \"flush\">\n                                <ListGroup.Item>\n                                    <h3>{product.name}</h3>\n                                </ListGroup.Item>\n\n                                <ListGroup.Item>\n                                    <Rating value={product.rating} text = {`${product.numReviews} reviews`} color = {'#f8e825'}/>\n                                </ListGroup.Item>\n\n                                <ListGroup.Item>\n                                    Price : ${product.price}\n                                </ListGroup.Item>\n\n                                <ListGroup.Item>\n                                    Description : {product.description}\n                                </ListGroup.Item>\n\n                            </ListGroup>\n\n                        </Col>\n\n                        <Col md = {3}>\n                            <Card>\n                                <ListGroup variant = \"flush\">\n                                    <ListGroup.Item>\n                                        <Row>\n                                            <Col>Price:</Col>\n                                            <Col>\n                                                <strong>${product.price}</strong>\n                                            </Col>\n                                        </Row>\n                                    </ListGroup.Item>\n\n                                    <ListGroup.Item>\n                                        <Row>\n                                            <Col>Status:</Col>\n                                            <Col>\n                                                {product.countInStock > 0 ? 'In Stock' : 'Out of Stock'}\n                                            </Col>\n                                        </Row>\n                                    </ListGroup.Item>\n\n                                    {product.countInStock > 0 && (\n                                        <ListGroup.Item>\n                                            <Row>\n                                                <Col>Qty</Col>\n                                                <Col xs='auto' className='my-1'>\n                                                    <Form.Control\n                                                        as=\"select\"\n                                                        value={qty}\n                                                        onChange={(e) => setQty(e.target.value)}\n                                                    >\n                                                        {\n\n                                                            [...Array(product.countInStock).keys()].map((x) => (\n                                                                <option key={x + 1} value={x + 1}>\n                                                                    {x + 1}\n                                                                </option>\n                                                            ))\n                                                        }\n\n                                                    </Form.Control>\n                                                </Col>\n                                            </Row>\n                                        </ListGroup.Item>\n                                    )}\n                                    <ListGroup.Item>\n                                        <Button \n                                            onClick = {addToCartHandler}\n                                            className = 'btn- col-12'\n                                            disabled = {product.countInStock == 0} \n                                            type = 'button'>\n                                            Add to Cart\n                                        </Button>\n                                    </ListGroup.Item>\n                                </ListGroup>\n                            </Card>\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col md={6}>\n                            <h4>Reviews</h4>\n                            {product.reviews.length === 0 && <Message variant='info'>No Reviews</Message>}\n\n                            <ListGroup variant='flush'>\n                                {product.reviews.map((review) => (\n                                    <ListGroup.Item key={review.id}>\n                                        <strong>{review.name}</strong>\n                                        <Rating value={review.rating} color='#f8e825' />\n                                        <p>{review.createdAt.substring(0, 10)}</p>\n                                        <p>{review.comment}</p>\n                                    </ListGroup.Item>\n                                ))}\n\n                                <ListGroup.Item>\n                                    <h4>Write a review</h4>\n\n                                    {loadingProductReview && <Loader />}\n                                    {successProductReview && <Message variant='success'>Review Submitted</Message>}\n                                    {errorProductReview && <Message variant='danger'>{errorProductReview}</Message>}\n\n                                    {userInfo ? (\n                                        <Form onSubmit={submitHandler}>\n                                            <Form.Group controlId='rating'>\n                                                <Form.Label>Rating</Form.Label>\n                                                <Form.Control\n                                                    as='select'\n                                                    value={rating}\n                                                    onChange={(e) => setRating(e.target.value)}\n                                                >\n                                                    <option value=''>Select...</option>\n                                                    <option value='1'>1 - Poor</option>\n                                                    <option value='2'>2 - Fair</option>\n                                                    <option value='3'>3 - Good</option>\n                                                    <option value='4'>4 - Very Good</option>\n                                                    <option value='5'>5 - Excellent</option>\n                                                </Form.Control>\n                                            </Form.Group>\n\n                                            <Form.Group controlId='comment' className = \"py-3\">\n                                                <Form.Label>Review</Form.Label>\n                                                <Form.Control\n                                                    as='textarea'\n                                                    row='5'\n                                                    value={comment}\n                                                    onChange={(e) => setComment(e.target.value)}\n                                                ></Form.Control>\n                                            </Form.Group>\n\n                                            <Button\n                                                disabled={loadingProductReview}\n                                                type='submit'\n                                                variant='primary'\n                \n                                            >\n                                                Submit\n                                            </Button>\n\n                                        </Form>\n                                    ) : (\n                                            <Message variant='info'>Please <Link to='/login'>login</Link> to write a review</Message>\n                                        )}\n                                </ListGroup.Item>\n                            </ListGroup>\n                        </Col>\n                    </Row>\n                </div>\n                )\n        }\n\n    </div>\n  )\n}\n\nexport default ProductScreen;","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/screens/ProfileScreen.js",["237","238","239","240","241"],[],"import { useEffect, useState } from \"react\"\nimport React from 'react'\nimport {Link,useLocation, useNavigate} from 'react-router-dom'\nimport {Form, Button, Row, Col, Table } from 'react-bootstrap'\nimport { useDispatch, useSelector } from \"react-redux\"\nimport Loader from \"../components/Loader\";\nimport Message from \"../components/Message\";\nimport FormContainer from \"../components/FormContainer\";\nimport {getUserDetails, updateUserProfile} from '../actions/userActions'\nimport { USER_UPDATE_PROFILE_RESET } from \"../constants/userConstants\"\nimport {listMyOrders} from '../actions/orderActions'\nimport { LinkContainer } from \"react-router-bootstrap\"\n\n\n\nfunction ProfileScreen() {\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [confirmPassword, setConfirmPassword] = useState('')\n    const [message, setMessage] = useState('')\n\n    const dispatch = useDispatch()\n    \n    const userDetails = useSelector(state => state.userDetails)\n    const {loading, user, error} = userDetails\n\n    const userLogin = useSelector(state => state.userLogin)\n    const {userInfo} = userLogin\n\n\n    const userUpdateProfile = useSelector(state => state.userUpdateProfile)\n    const { success } = userUpdateProfile\n\n\n    const orderListMy = useSelector(state => state.orderListMy)\n    const { loading : loadingOrders, error: errorOrders, orders } = orderListMy\n\n  let navigate = useNavigate();\n\n    useEffect(() => {\n        if(!userInfo){\n            \n            let pathname = '/login'\n            navigate(pathname)\n        }\n        else{\n            if(!user || !user.name || success || userInfo.id !== user.id){\n                dispatch({type : USER_UPDATE_PROFILE_RESET})\n                dispatch(getUserDetails('profile'))\n                dispatch(listMyOrders())\n            }else{\n                setName(user.name)\n                setEmail(user.email)\n            }\n        }\n    }, [dispatch, user, userInfo, success])\n\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n\n        if(password != confirmPassword){\n            setMessage('Passwords do not match')\n        }\n        else{\n            dispatch(updateUserProfile({\n                'id': user.id,\n                'name':name,\n                'email' : email,\n                'password' : password\n            }))\n            setMessage('')\n        }\n    }\n\n\n\n  return (\n    <div>\n        <Row>\n            <Col md = {3}>\n                <h2>User Profile</h2>\n\n                {message && <Message variant = 'danger'>{message}</Message>}\n                {error && <Message variant = 'danger'>{error}</Message>}\n                {loading && <Loader />}\n                <Form onSubmit = {submitHandler}>\n\n                <Form.Group controlId = 'name' className = 'py-3'>\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control\n                        required\n                        type = 'name'\n                        placeholder = 'Enter Name'\n                        value = {name}\n                        onChange = {(e) => setName(e.target.value)}\n                        >\n                        </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId = 'email' className = 'py-3'>\n                        <Form.Label>Email Address</Form.Label>\n                        <Form.Control\n                        required\n                        type = 'email'\n                        placeholder = 'Enter Email'\n                        value = {email}\n                        onChange = {(e) => setEmail(e.target.value)}\n                        >\n                        </Form.Control>\n                </Form.Group>\n                \n\n                <Form.Group controlId = 'password' className = 'py-3'>\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control\n                        type = 'password'\n                        placeholder = 'Enter Password'\n                        value = {password}\n                        onChange = {(e) => setPassword(e.target.value)}\n                        >\n\n                        </Form.Control>\n                </Form.Group>\n\n\n                <Form.Group controlId = 'passwordConfirm' className = 'py-3'>\n                        <Form.Label>Confirm Password</Form.Label>\n                        <Form.Control\n                        type = 'password'\n                        placeholder = 'Confirm Password'\n                        value = {confirmPassword}\n                        onChange = {(e) => setConfirmPassword(e.target.value)}\n                        >\n\n                        </Form.Control>\n                </Form.Group>\n\n                <Button\n                        type = 'submit'\n                        variant = 'primary'\n                        className = 'py-3'\n                    >\n                        Update\n                </Button>\n                </Form>\n\n            </Col>\n\n            <Col md = {9}>\n                <h2>My Orders</h2>\n                {loadingOrders ? (\n                    <Loader />\n                ) : errorOrders ?(\n                    <Message variant = 'danger'>{errorOrders}</Message>\n                ) : (\n                    <Table striped responsive className = 'table-sm'>\n                        <thead>\n                            <tr>\n                                <th>ID</th>\n                                <th>Date</th>\n                                <th>Total</th>\n                                <th>Paid</th>\n                                <th>Delivered</th>\n                                <th></th>\n                            </tr>\n                        </thead>\n\n                        <tbody>\n                            {orders.map(order => (\n                                <tr key = {order.id}>\n                                    <td>{order.id}</td>\n                                    <td>{order.createdAt.substring(0,10)}</td>\n                                    <td>${order.totalPrice}</td>\n                                    <td>{order.isPaid ? order.paidAt.substring(0,10) : (\n                                        <i className=\"fas fa-times\" style = {{color : 'red'}}></i>\n                                    )}</td>\n                                    <td>\n                                        <LinkContainer to = {`/order/${order.id}`}>\n                                            <Button className = 'btn-sm'>Details</Button>\n                                        </LinkContainer>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </Table>\n                )}\n            </Col>\n        </Row>\n    </div>\n  )\n}\n\nexport default ProfileScreen","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/screens/PlaceOrderScreen.js",["242","243","244"],[],"import { useEffect, useState } from \"react\"\nimport React from 'react'\nimport {useLocation, Link, useNavigate} from 'react-router-dom'\nimport {Button, Row,Col, ListGroup, Image, Card } from 'react-bootstrap'\nimport { useDispatch, useSelector } from \"react-redux\"\nimport CheckoutSteps from \"../components/CheckoutSteps\";\nimport Message from \"../components/Message\";\nimport {createOrder} from '../actions/orderActions'\nimport { ORDER_CREATE_RESET } from \"../constants/orderConstants\"\n\nfunction PlaceOrderScreen() {\n\n  const orderCreate = useSelector(state => state.orderCreate)\n  const {order, error, success } = orderCreate\n\n  const dispatch = useDispatch()\n  const cart = useSelector(state => state.cart)\n\n  cart.itemsPrice = cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\n  cart.shippingPrice = (cart.itemsPrice > 100 ? 0 : 10).toFixed(2)\n  cart.taxPrice =  (cart.itemsPrice * (0.18)).toFixed(2)\n  cart.totalPrice = (Number(cart.itemsPrice) + Number(cart.shippingPrice) + Number(cart.taxPrice)).toFixed(2)\n  \n  let navigate = useNavigate();\n\n\n  useEffect(() => {\n\n  if (!cart.paymentMethod) {\n    let payment_redirect = '/payment'\n    navigate(payment_redirect)\n    }\n    if (success) {\n      let pathname = `/order/${order.id}`\n      navigate(pathname)\n      dispatch({ type: ORDER_CREATE_RESET })\n    }\n}, [success])\n\n\n  const placeOrder = () => {\n    dispatch(createOrder({\n      orderItems: cart.cartItems,\n      shippingAddress : cart.shippingAddress,\n      paymentMethod: cart.paymentMethod,\n      itemsPrice : cart.itemsPrice,\n      shippingPrice: cart.shippingPrice,\n      taxPrice: cart.taxPrice,\n      totalPrice: cart.totalPrice\n    }))\n\n  }\n  return (\n    <div>\n      <CheckoutSteps step1 step2 step3 step4 />\n      <Row>\n        <Col md = {8}>\n           <ListGroup variant = 'flush'>\n           <ListGroup.Item>\n              <h2>Shipping</h2>\n\n              <p>\n                  <strong>Shipping: </strong>\n                  {cart.shippingAddress.address},  {cart.shippingAddress.city}\n                  {'  '}\n                  {cart.shippingAddress.postalCode},\n                  {'  '}\n                  {cart.shippingAddress.country}\n              </p>\n          </ListGroup.Item>\n\n\n          <ListGroup.Item>\n              <h2>Payment Method</h2>\n\n              <p>\n                  <strong>Method: </strong>\n                  {cart.paymentMethod}\n              </p>\n          </ListGroup.Item>\n\n          <ListGroup.Item>\n              <h2>Order Items</h2>\n              {cart.cartItems.length === 0 ? <Message variant = 'info'>\n                Your cart is empty\n              </Message> : (\n                <ListGroup variant = 'flush'>\n                  {cart.cartItems.map((item, index) => (\n                    <ListGroup.Item key = {index}>\n                      <Row>\n                        <Col md = {1}>\n                          <Image src = {item.image} alt = {item.name} fluid rounded />\n                        </Col>\n\n                        <Col>\n                          <Link to = {`/product/${item.product}`}>{item.name}</Link>\n                        </Col>\n\n                        <Col md = {4}>\n                          {item.qty} X ${item.price} = ${(item.qty * item.price).toFixed(2)}\n                        </Col>\n                      </Row>\n                    </ListGroup.Item>\n                  ))}\n                </ListGroup>\n              )\n              \n            }\n          </ListGroup.Item>\n\n           </ListGroup>\n        </Col>\n\n        <Col md = {4}>\n            <Card>\n              <ListGroup variant = 'flush'>\n                <ListGroup.Item>\n                  <h2>Order Summary</h2>\n                </ListGroup.Item>\n\n                <ListGroup.Item>\n                  <Row>\n                    <Col>Item:</Col>\n                    <Col>${cart.itemsPrice}</Col>\n                  </Row>\n                </ListGroup.Item>\n\n                <ListGroup.Item>\n                  <Row>\n                    <Col>Shipping:</Col>\n                    <Col>${cart.shippingPrice}</Col>\n                  </Row>\n                </ListGroup.Item>\n\n                <ListGroup.Item>\n                  <Row>\n                    <Col>Tax:</Col>\n                    <Col>${cart.taxPrice}</Col>\n                  </Row>\n                </ListGroup.Item>\n\n                <ListGroup.Item>\n                  <Row>\n                    <Col>Total:</Col>\n                    <Col>${cart.totalPrice}</Col>\n                  </Row>\n                </ListGroup.Item>\n\n                <ListGroup.Item>\n                  {error && <Message variant = 'danger'>{error}</Message>}\n\n                </ListGroup.Item>\n\n                <ListGroup.Item>\n                  <Button\n                  type = 'button'\n                  className = 'btn-block col-12'\n                  disabled = {cart.cartItems === 0}\n                  onClick = {placeOrder}\n                  >\n                    Place Order\n                  </Button>\n                </ListGroup.Item>\n              </ListGroup>\n            </Card>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default PlaceOrderScreen","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/screens/PaymentScreen.js",["245","246"],[],"import { useEffect, useState } from \"react\"\nimport React from 'react'\nimport {useLocation, useNavigate} from 'react-router-dom'\nimport {Form, Button, Col } from 'react-bootstrap'\nimport { useDispatch, useSelector } from \"react-redux\"\nimport FormContainer from \"../components/FormContainer\";\nimport CheckoutSteps from \"../components/CheckoutSteps\";\nimport {savePaymentMethod} from '../actions/cartActions'\n\nfunction PaymentScreen() {\n\n  const cart = useSelector(state => state.cart)\n  const {shippingAddress} = cart\n\n  const dispatch = useDispatch()\n\n  const [paymentMethod, setPaymentMethod] = useState('PayPal')\n\n  let navigate = useNavigate();\n\n    if(!shippingAddress.address){\n        let pathname = '/shipping'\n        navigate(pathname)\n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        console.log(paymentMethod)\n        dispatch(savePaymentMethod(paymentMethod))\n        let pathname = '/placeorder'\n        navigate(pathname)\n    } \n\n    const onPaymentMethodChange = ({ target: { value } }) => {\n        setPaymentMethod(value);\n      };\n    \n\n  return (\n    <FormContainer>\n        <CheckoutSteps step1 step2 step3 />\n\n        <Form onSubmit = {submitHandler}>\n            <Form.Group>\n                <Form.Label as = 'legend'>Select Method</Form.Label>\n                <Col>\n                    <Form.Check\n                        type = 'radio'\n                        label = 'PayPal or Credit Card'\n                        id = 'PayPal'\n                        name = 'paymentMethod'\n                        value = 'PayPal'\n                        checked = {paymentMethod === 'PayPal'}\n                        onChange = {onPaymentMethodChange}\n                        >\n                            \n                    </Form.Check>\n\n                    <Form.Check\n                        type = 'radio'\n                        label = 'Google Pay'\n                        id = 'GooglePay'\n                        name = 'paymentMethod'\n                        value = 'GooglePay'\n                        checked = {paymentMethod === 'GooglePay'}\n                        onChange = {onPaymentMethodChange}\n                        >\n                            \n                    </Form.Check>\n\n                </Col>\n            </Form.Group>\n            <Button type = 'submit' variant = 'primary'>\n                Contiue\n            </Button>\n        </Form>\n    </FormContainer>\n  )\n}\n\nexport default PaymentScreen","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/screens/OrderScreen.js",["247","248","249","250"],[],"import { useEffect, useState } from \"react\"\nimport React from 'react'\nimport {useLocation, Link, useNavigate, useParams} from 'react-router-dom'\nimport {Button, Row,Col, ListGroup, Image, Card } from 'react-bootstrap'\nimport { useDispatch, useSelector } from \"react-redux\"\nimport {PayPalButton} from \"react-paypal-button-v2\"\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport {getOrderDetails, payOrder, deliverOrder} from '../actions/orderActions'\nimport {ORDER_PAY_RESET, ORDER_DELIVER_RESET} from '../constants/orderConstants'\n\nfunction OrderScreen() {\n\n    const {id} = useParams()\n    const dispatch = useDispatch()\n\n\n    // const[sdkReady, setSdkReady] = useState(false)\n\n\n    const orderDetails = useSelector(state => state.orderDetails)\n  const {order, error, loading } = orderDetails\n\n  const orderPay = useSelector(state => state.orderPay)\n  const { loading: loadingPay, success: successPay, error : errorPay } = orderPay\n\n  const orderDeliver = useSelector(state => state.orderDeliver)\n  const { loading: loadingDeliver, success: successDeliver } = orderDeliver\n\n  const userLogin = useSelector(state => state.userLogin)\n  const { userInfo } = userLogin\n  \n    if(!loading && !error){\n        order.itemsPrice = order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\n    }\n\n\n    // AU7WHbQgidy2sONAruiWMG3tBnFNGXKTYJG7fL9LrVSwgIQLLmNitJA4Xeqc6q79Gxs6LRR38nk9eC7d\n  \n\n    // const addPayPalScript = () => {\n    //     const script = document.createElement('script')\n    //     script.type = 'text/javascript'\n    //     script.src = 'https://www.paypal.com/sdk/js?client-id=AU7WHbQgidy2sONAruiWMG3tBnFNGXKTYJG7fL9LrVSwgIQLLmNitJA4Xeqc6q79Gxs6LRR38nk9eC7d'\n    //     script.async = true\n    //     script.onload = () => {\n    //         setSdkReady(true)\n    //     }\n    //     document.body.appendChild(script)\n    // }\n\n\n\n  let navigate = useNavigate();\n\n\n\n  useEffect(() => {\n\n    if (!userInfo) {\n        navigate('/login')\n    }\n\n    if(!order || successPay || order.id !== Number(id) || successDeliver){\n        dispatch({ type: ORDER_PAY_RESET })\n        dispatch({ type: ORDER_DELIVER_RESET })\n        dispatch(getOrderDetails(id))\n    }\n    \n    \n    // else if(!order.isPaid)\n    // {\n    //     if(!window.paypal){\n    //         addPayPalScript()\n    //     }\n        \n    //     else{\n    //         setSdkReady(true)\n    //     }\n    // }\n\n}, [dispatch, order, id, successPay, successDeliver])\n\n\n\nconst successPaymentHandler = () => {\n\n    if (window.confirm(`Make payment of ${order.totalPrice} with ${order.paymentMethod}?`)) {\n      dispatch(payOrder(id))\n  }\n\n}\n\nconst deliverHandler = () => {\n  dispatch(deliverOrder(order))\n}\n\n\n  return loading ? (\n    <Loader />\n) : error ? (\n    <Message variant='danger'>{error}</Message>\n) : (\n    <div>\n        <h1>Order: {order.id}</h1>\n      <Row>\n        <Col md = {8}>\n           <ListGroup variant = 'flush'>\n           <ListGroup.Item>\n              <h2>Shipping</h2>\n                <p><strong>Name: </strong> {order.user.name}</p>\n                <p><strong>Email: </strong> <a href = {`mailto:${order.user.email}`}> {order.user.email}</a></p>\n\n              <p>\n\n                  <strong>Shipping: </strong>\n                  {order.shippingAddress.address},  {order.shippingAddress.city}\n                  {'  '}\n                  {order.shippingAddress.postalCode},\n                  {'  '}\n                  {order.shippingAddress.country}\n              </p>\n\n\n              {order.isDelivered ? (\n                    <Message variant='success'>Delivered on {order.deliveredAt.substring(0,10)}</Message>\n                ) : (\n                        <Message variant='warning'>Not Delivered</Message>\n                    )}\n          </ListGroup.Item>\n\n\n          <ListGroup.Item>\n              <h2>Payment Method</h2>\n\n              <p>\n                  <strong>Method: </strong>\n                  {order.paymentMethod}\n              </p>\n\n              {order.isPaid ? (\n                <Message variant = 'success'>Paid on {order.paidAt.substring(0,10)}</Message>\n              ): (\n                <Message variant = 'warning'>Not Paid</Message>\n              )}\n          </ListGroup.Item>\n\n          <ListGroup.Item>\n              <h2>Order Items</h2>\n              {order.orderItems.length === 0 ? <Message variant = 'info'>\n                Order is empty\n              </Message> : (\n                <ListGroup variant = 'flush'>\n                  {order.orderItems.map((item, index) => (\n                    <ListGroup.Item key = {index}>\n                      <Row>\n                        <Col md = {1}>\n                          <Image src = {item.image} alt = {item.name} fluid rounded />\n                        </Col>\n\n                        <Col>\n                          <Link to = {`/product/${item.product}`}>{item.name}</Link>\n                        </Col>\n\n                        <Col md = {4}>\n                          {item.qty} X ${item.price} = ${(item.qty * item.price).toFixed(2)}\n                        </Col>\n                      </Row>\n                    </ListGroup.Item>\n                  ))}\n                </ListGroup>\n              )\n              \n            }\n          </ListGroup.Item>\n\n           </ListGroup>\n        </Col>\n\n        <Col md = {4}>\n            <Card>\n              <ListGroup variant = 'flush'>\n                <ListGroup.Item>\n                  <h2>Order Summary</h2>\n                </ListGroup.Item>\n\n                <ListGroup.Item>\n                  <Row>\n                    <Col>Item:</Col>\n                    <Col>${order.itemsPrice}</Col>\n                  </Row>\n                </ListGroup.Item>\n\n                <ListGroup.Item>\n                  <Row>\n                    <Col>Shipping:</Col>\n                    <Col>${order.shippingPrice}</Col>\n                  </Row>\n                </ListGroup.Item>\n\n                <ListGroup.Item>\n                  <Row>\n                    <Col>Tax:</Col>\n                    <Col>${order.taxPrice}</Col>\n                  </Row>\n                </ListGroup.Item>\n\n                <ListGroup.Item>\n                  <Row>\n                    <Col>Total:</Col>\n                    <Col>${order.totalPrice}</Col>\n                  </Row>\n                </ListGroup.Item>\n\n\n                {!order.isPaid &&  (\n                    <ListGroup.Item>\n                        {loadingPay && <Loader />}\n                        {errorPay && <Message variant='red'>{errorPay}</Message>}\n                        {/* {!sdkReady ? (\n                            <Loader />\n                        ) : ( \n                            <PayPalButton\n                                amount={order.totalPrice}\n                                onSuccess={successPaymentHandler}\n                            />\n                        )} */}\n                        <Button\n                            disabled={order.isPaid}\n                            type='submit'\n                            variant='primary'\n                            onClick={successPaymentHandler}\n                        >\n                          Pay with {order.paymentMethod}\n                        </Button>\n                    </ListGroup.Item>\n                )}\n                \n                {loadingDeliver && <Loader />}\n                {userInfo && userInfo.isAdmin && order.isPaid && !order.isDelivered && (\n                    <ListGroup.Item>\n                        <Button\n                            type='button'\n                            className='btn btn-block'\n                            onClick={deliverHandler}\n                        >\n                            Mark As Delivered\n                        </Button>\n                    </ListGroup.Item>\n                )}\n              </ListGroup>\n            </Card>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default OrderScreen","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/screens/RegisterScreen.js",["251","252"],[],"import { useEffect, useState } from \"react\"\nimport React from 'react'\nimport {Link,useLocation, useNavigate} from 'react-router-dom'\nimport {Form, Button, Row, Col } from 'react-bootstrap'\nimport { useDispatch, useSelector } from \"react-redux\"\nimport Loader from \"../components/Loader\";\nimport Message from \"../components/Message\";\nimport FormContainer from \"../components/FormContainer\";\nimport {register} from '../actions/userActions'\n\n\nfunction RegisterScreen() {\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [confirmPassword, setConfirmPassword] = useState('')\n    const [message, setMessage] = useState('')\n\n    const dispatch = useDispatch()\n    const location = useLocation();\n    const redirect = location.search ? location.search.split('=')[1] : '/'\n    \n    \n    const userLogin = useSelector(state => state.userLogin)\n    const {userInfo} = userLogin\n\n    const userRegister = useSelector(state => state.userRegister)\n    const { error, loading, userInfoRegister } = userRegister\n\n\n    let navigate = useNavigate();\n\n    useEffect(() => {\n        console.log(userInfo)\n        if(userInfo){\n          console.log('register',redirect)\n            let pathname = redirect\n            navigate(pathname)\n        }\n        if(userInfoRegister){\n            console.log('register',redirect)\n              let pathname = redirect\n              navigate(pathname)\n          }\n    }, [userInfo, redirect])\n\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n\n        if(password != confirmPassword){\n            setMessage('Passwords do not match')\n        }\n        else{\n        dispatch(register(name, email, password))\n        }\n    }\n\n\n\n  return (\n    <FormContainer>\n        <h1>Sign In</h1>\n        {message && <Message variant = 'danger'>{message}</Message>}\n        {error && <Message variant = 'danger'>{error}</Message>}\n        {loading && <Loader />}\n        <Form onSubmit = {submitHandler}>\n\n        <Form.Group controlId = 'name' className = 'py-3'>\n                <Form.Label>Name</Form.Label>\n                <Form.Control\n                required\n                type = 'name'\n                placeholder = 'Enter Name'\n                value = {name}\n                onChange = {(e) => setName(e.target.value)}\n                >\n                </Form.Control>\n        </Form.Group>\n\n        <Form.Group controlId = 'email' className = 'py-3'>\n                <Form.Label>Email Address</Form.Label>\n                <Form.Control\n                required\n                type = 'email'\n                placeholder = 'Enter Email'\n                value = {email}\n                onChange = {(e) => setEmail(e.target.value)}\n                >\n                </Form.Control>\n        </Form.Group>\n        \n\n        <Form.Group controlId = 'password' className = 'py-3'>\n                <Form.Label>Password</Form.Label>\n                <Form.Control\n                required\n                type = 'password'\n                placeholder = 'Enter Password'\n                value = {password}\n                onChange = {(e) => setPassword(e.target.value)}\n                >\n\n                </Form.Control>\n        </Form.Group>\n\n\n        <Form.Group controlId = 'passwordConfirm' className = 'py-3'>\n                <Form.Label>Confirm Password</Form.Label>\n                <Form.Control\n                required\n                type = 'password'\n                placeholder = 'Confirm Password'\n                value = {confirmPassword}\n                onChange = {(e) => setConfirmPassword(e.target.value)}\n                >\n\n                </Form.Control>\n        </Form.Group>\n\n        <Button\n                type = 'submit'\n                variant = 'primary'\n                className = 'py-3'\n            >\n                Register\n        </Button>\n        </Form>\n\n        <Row className = 'py-3'>\n        <Col>\n            Have an account ? <Link\n                to={redirect ? `/login?redirect=${redirect}` : '/login'}>\n                Sign In\n                </Link>\n        </Col>\n        </Row>\n    </FormContainer>\n  )\n}\n\nexport default RegisterScreen","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/screens/LoginScreen.js",["253"],[],"import { useEffect, useState } from \"react\"\nimport React from 'react'\nimport {Link, useLocation, useNavigate} from 'react-router-dom'\nimport {Form, Button, Row, Col } from 'react-bootstrap'\nimport { useDispatch, useSelector } from \"react-redux\"\nimport Loader from \"../components/Loader\";\nimport Message from \"../components/Message\";\nimport FormContainer from \"../components/FormContainer\";\nimport {login} from '../actions/userActions'\n\nfunction LoginScreen() { \n\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n\n    const dispatch = useDispatch()\n    const location = useLocation();\n    const redirect = location.search ? location.search.split('=')[1] : '/'\n    console.log(redirect)\n\n    const userLogin = useSelector(state => state.userLogin)\n\n    const {loading, userInfo, error} = userLogin\n\n\n  let navigate = useNavigate();\n\n    useEffect(() => {\n        if(userInfo){\n          console.log('login',redirect)\n            let pathname = redirect\n            navigate(pathname)\n        }\n    }, [userInfo, redirect])\n\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(login(email, password))\n    }\n\n  return (\n    <FormContainer>\n        \n        <h1>Sign In</h1>\n        {error && <Message variant = 'danger'>{error}</Message>}\n        {loading && <Loader />}\n        <Form onSubmit = {submitHandler}>\n            <Form.Group controlId = 'email' className = 'py-3'>\n                  <Form.Label>Email Address</Form.Label>\n                  <Form.Control\n                    type = 'email'\n                    placeholder = 'Enter Email'\n                    value = {email}\n                    onChange = {(e) => setEmail(e.target.value)}\n                  >\n                  </Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId = 'password' className = 'py-3'>\n                  <Form.Label>Password</Form.Label>\n                  <Form.Control\n                    type = 'password'\n                    placeholder = 'Enter Password'\n                    value = {password}\n                    onChange = {(e) => setPassword(e.target.value)}\n                  >\n\n                  </Form.Control>\n            </Form.Group>\n\n            <Button\n                type = 'submit'\n                variant = 'primary'\n                className = 'py-3'\n            >\n                Sign In\n            </Button>\n        </Form>\n\n        <Row className = 'py-3'>\n        <Col>\n            New Customer? <Link\n                to={redirect ? `/register?redirect=${redirect}` : '/register'}>\n                Register\n                </Link>\n        </Col>\n        </Row>\n    </FormContainer>\n  )\n}\n\nexport default LoginScreen","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/screens/CartScreen.js",["254"],[],"import React,{useEffect} from 'react'\nimport { Link, useParams, useNavigate } from 'react-router-dom'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {Row, Col, ListGroup, Image, Form, Button, Card} from 'react-bootstrap'\nimport Message from '../components/Message'\nimport {addToCart, removeFromCart} from '../actions/cartActions'\n\nfunction CartScreen() {\n\n  const {id} = useParams()\n  const params = new URLSearchParams(window.location.search);\n  const qty = Number(params.get(\"qty\"))\n\n  console.log('hi', qty)\n  const dispatch = useDispatch()\n\n\n\n  const cart = useSelector(state => state.cart)\n  const {cartItems} = cart\n  console.log(cartItems)\n\n  useEffect(() => {\n    if(id){\n      dispatch(addToCart(id,qty))\n    }\n  }, [dispatch, id, qty])\n\n  const removeFromCartHandler = (id) => {\n      dispatch(removeFromCart(id))\n  }\n\n\n  let navigate = useNavigate();\n\n  const checkoutHandler = () => {\n    let pathname = '/login?redirect=/shipping'\n    navigate(pathname)\n  }\n\n\n  return (\n    <Row>\n      <Col md = {8}>\n        <h1>Shopping Cart</h1>\n        {cartItems.length === 0 ? (\n          <Message variant = 'info'>\n            Your Cart is empty <Link to = '/'>Go Back</Link>\n          </Message>\n\n        ) : (\n          <ListGroup variant = 'flush'>\n            {cartItems.map(item => (\n              <ListGroup.Item key = {item.product}>\n                <Row>\n                  <Col md = {2}>\n                    <Image src = {item.image} alt = {item.name} fluid rounded/>\n                  </Col>\n                  <Col md = {3}>\n                    <Link to = {`/prod/${item.product}`}>{item.name}</Link>\n                  </Col>\n\n                  <Col md = {2}>\n                    ${item.price}\n                  </Col>\n                  <Col md = {3}>\n                  <Form.Control\n                      as=\"select\"\n                      value={item.qty}\n                      onChange={(e) => dispatch(addToCart(item.product, Number(e.target.value)))}\n                  >\n                    {\n\n                        [...Array(item.countInStock).keys()].map((x) => (\n                            <option key={x + 1} value={x + 1}>\n                                {x + 1}\n                            </option>\n                        ))\n                    }\n\n                  </Form.Control>\n                                            \n                  </Col>\n\n                  <Col md = {1}>\n                    <Button\n                      type = 'button'\n                      variant = 'light'\n                      onClick = {() => removeFromCartHandler(item.product)}\n                    >\n                      <i className = 'fas fa-trash'></i>\n                    </Button>\n                  </Col>\n                </Row>\n              </ListGroup.Item>\n            ))}\n          </ListGroup>\n        )}\n      </Col>\n      <Col md = {4}>\n        <ListGroup variant = 'flush'>\n          <ListGroup.Item>\n            <h2>SubTotal ({cartItems.reduce((acc, item) => acc + item.qty, 0)}) items</h2>\n            ${cartItems.reduce((acc, item) => acc + item.qty * item.price , 0).toFixed(2)}\n          \n          </ListGroup.Item>\n          \n          <ListGroup.Item>\n            <Button\n            type = 'button'\n            className = 'btn-block col-12'\n            disabled = {cartItems.length === 0}\n            onClick = {checkoutHandler}\n            >\n              Proceed To Checkout\n            </Button>\n          </ListGroup.Item>\n        </ListGroup>\n      </Col>\n    </Row>\n  )\n}\n\nexport default CartScreen;","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/screens/ShippingScreen.js",["255","256"],[],"import { useEffect, useState } from \"react\"\nimport React from 'react'\nimport {useLocation, useNavigate} from 'react-router-dom'\nimport {Form, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from \"react-redux\"\nimport FormContainer from \"../components/FormContainer\";\nimport CheckoutSteps from \"../components/CheckoutSteps\";\nimport {saveShippingAddress} from '../actions/cartActions'\n\nfunction ShippingScreen() {\n\n  const cart = useSelector(state => state.cart)\n  const {shippingAddress} = cart\n\n  const dispatch = useDispatch()\n\n\n  const [address, setAddress] = useState(shippingAddress.address)\n  const [city, setCity] = useState(shippingAddress.city)\n  const [postalCode, setPostalCode] = useState(shippingAddress.postalCode)\n  const [country, setCountry] = useState(shippingAddress.country)\n\n  let navigate = useNavigate();\n  \n  const submitHandler = (e) => {\n    e.preventDefault()\n    dispatch(saveShippingAddress({address, city, postalCode, country}))\n    let pathname = '/payment'\n    navigate(pathname)\n\n  }\n  return (\n    <FormContainer>\n      <CheckoutSteps step1 step2/>\n      <h1>Shipping</h1>\n      <Form onSubmit = {submitHandler}>\n      <Form.Group controlId = 'address' className = 'py-3'>\n        <Form.Label>Address</Form.Label>\n        <Form.Control\n        required\n        type = 'text'\n        placeholder = 'Enter Address'\n        value = {address ? address : ''}\n        onChange = {(e) => setAddress(e.target.value)}\n        >\n        </Form.Control>\n      </Form.Group>\n\n      <Form.Group controlId = 'city' className = 'py-3'>\n        <Form.Label>City</Form.Label>\n        <Form.Control\n        required\n        type = 'text'\n        placeholder = 'Enter City'\n        value = {city ? city : ''}\n        onChange = {(e) => setCity(e.target.value)}\n        >\n        </Form.Control>\n      </Form.Group>\n\n      <Form.Group controlId = 'postalCode' className = 'py-3'>\n        <Form.Label>Postal Code</Form.Label>\n        <Form.Control\n        required\n        type = 'text'\n        placeholder = 'Enter PostalCode'\n        value = {postalCode ? postalCode : ''}\n        onChange = {(e) => setPostalCode(e.target.value)}\n        >\n        </Form.Control>\n      </Form.Group>\n\n\n      <Form.Group controlId = 'country' className = 'py-3'>\n        <Form.Label>Country</Form.Label>\n        <Form.Control\n        required\n        type = 'text'\n        placeholder = 'Enter Country'\n        value = {country ? country : ''}\n        onChange = {(e) => setCountry(e.target.value)}\n        >\n        </Form.Control>\n      </Form.Group>\n\n\n      <Button type = 'submit' variant = 'primary'>\n        Continue\n      </Button>\n      </Form>\n    </FormContainer>\n  )\n}\n\nexport default ShippingScreen","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/screens/UserListScreen.js",["257","258","259","260","261"],[],"import { useEffect, useState } from \"react\"\nimport React from 'react'\nimport {useLocation, useNavigate} from 'react-router-dom'\nimport {Table, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from \"react-redux\"\nimport Loader from \"../components/Loader\";\nimport Message from \"../components/Message\";\nimport FormContainer from \"../components/FormContainer\";\nimport {Link, LinkContainer } from 'react-router-bootstrap'\nimport {listUsers, deleteUser} from '../actions/userActions'\n\n\nfunction UserListScreen() {\n\n    const dispatch = useDispatch()\n\n    const userList = useSelector( state => state.userList)\n    const {loading, error, users} = userList\n\n    const userLogin = useSelector(state => state.userLogin)\n    const {userInfo} = userLogin\n\n    const userDelete = useSelector(state => state.userDelete)\n    const {success : successDelete} = userDelete\n\n    let navigate = useNavigate();\n\n    useEffect(() => {\n        if(userInfo && userInfo.isAdmin)\n        {\n            dispatch(listUsers())\n        }else{\n            navigate('/login')\n        }\n    }, [dispatch,successDelete,userInfo])\n  \n  const deleteHandler = (id) => {\n    if (window.confirm('Are you sure you want to delete this user?')) {\n        dispatch(deleteUser(id))\n    }\n  }\n    return (\n    <div>\n        <h1>Users</h1>\n        {loading\n        ? (<Loader />)\n        : error\n            ? (<Message variant = 'danger'> {error}</Message>)\n            : (\n                <Table striped bordered hover responsive className=\"table-sm\">\n                    <thead>\n                        <tr>\n                            <th>ID</th>\n                            <th>NAME</th>\n                            <th>EMAIL</th>\n                            <th>ADMIN</th>\n                            <th></th>\n                        </tr>\n                    </thead>\n\n                    <tbody>\n                        {users.map(user => (\n                            <tr key = {user.id}>\n                                <td>{user.id}</td>\n                                <td>{user.name}</td>\n                                <td>{user.email}</td>\n                                <td>{user.isAdmin ? (\n                                    <i className= \"fas fa-check\" style = {{color : 'green'}}></i>\n                                ) : (\n                                    <i className=\"fas fa-times\" style = {{color : 'red'}}></i>\n                                )}</td>\n\n                                <td>\n                                    <LinkContainer to = {`/admin/user/${user.id}/edit`}>\n                                        <Button variant = 'light' className = 'btn-sm'> \n                                        <i className=\"fas fa-edit\"></i>\n                                        </Button>\n                                    </LinkContainer>\n\n                                    <Button variant = 'danger' className = 'btn-sm' onClick = {() => deleteHandler(user.id)}> \n                                        <i className=\"fas fa-trash\"></i>\n                                    </Button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n\n                </Table>\n            )\n        }\n    </div>\n  )\n}\n\nexport default UserListScreen","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/screens/OrderListScreen.js",["262","263","264","265","266"],[],"import { useEffect, useState } from \"react\"\nimport React from 'react'\nimport {useLocation, useNavigate} from 'react-router-dom'\nimport {Table, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from \"react-redux\"\nimport Loader from \"../components/Loader\";\nimport Message from \"../components/Message\";\nimport FormContainer from \"../components/FormContainer\";\nimport {Link, LinkContainer } from 'react-router-bootstrap'\nimport {listOrders} from '../actions/orderActions'\n\n\nfunction OrderListScreen() {\n    const dispatch = useDispatch()\n\n    const orderList = useSelector( state => state.orderList)\n    const {loading, error, orders} = orderList\n\n    const userLogin = useSelector(state => state.userLogin)\n    const {userInfo} = userLogin\n\n    let navigate = useNavigate();\n\n    useEffect(() => {\n        if(userInfo && userInfo.isAdmin)\n        {\n            dispatch(listOrders())\n        }else{\n            navigate('/login')\n        }\n    }, [dispatch,userInfo])\n  \n\n    return (\n    <div>\n        <h1>Orders</h1>\n        {loading\n        ? (<Loader />)\n        : error\n            ? (<Message variant = 'danger'> {error}</Message>)\n            : (\n                <Table striped bordered hover responsive className=\"table-sm\">\n                    <thead>\n                        <tr>\n                            <th>ID</th>\n                            <th>USER</th>\n                            <th>DATE</th>\n                            <th>Total</th>\n                            <th>PAID</th>\n                            <th>DELIVERED</th>\n                            <th></th>\n                        </tr>\n                    </thead>\n\n                    <tbody>\n                        {orders.map(order => (\n                        <tr key={order.id}>\n                            <td>{order.id}</td>\n                            <td>{order.user && order.user.name}</td>\n                            <td>{order.createdAt.substring(0, 10)}</td>\n                            <td>${order.totalPrice}</td>\n                            <td>{order.isPaid ? (\n                                order.paidAt.substring(0, 10)\n                            ) : (\n                                    <i className=\"fas fa-times\" style = {{color : 'red'}}></i>\n                                )}\n                            </td>\n\n                            <td>{order.isDelivered ? (\n                                    order.deliveredAt.substring(0, 10)\n                                ) : (\n                                        <i className='fas fa-times' style={{ color: 'red' }}></i>\n                                    )}\n                                </td>\n                                <td>\n                                    <LinkContainer to={`/order/${order.id}`}>\n                                        <Button variant='light' className='btn-sm'>\n                                            Details\n                                        </Button>\n                                    </LinkContainer>\n                                </td> \n                        </tr>\n                        ))}\n                    </tbody>\n\n                </Table>\n            )\n        }\n    </div>\n  )\n}\n\nexport default OrderListScreen","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/screens/ProductListScreen.js",["267","268","269","270"],[],"import { useEffect, useState } from \"react\"\nimport React from 'react'\nimport {useLocation, useNavigate} from 'react-router-dom'\nimport {Table, Button,Row,Col } from 'react-bootstrap'\nimport { useDispatch, useSelector } from \"react-redux\"\nimport Loader from \"../components/Loader\";\nimport Message from \"../components/Message\";\nimport FormContainer from \"../components/FormContainer\";\nimport {Link, LinkContainer } from 'react-router-bootstrap'\nimport {listProducts, deleteProduct, createProduct} from '../actions/productActions'\nimport {PRODUCT_CREATE_RESET} from '../constants/productConstants'\nimport Paginate from '../components/Paginate'\n\n\nfunction ProductListScreen() {\n    const dispatch = useDispatch()\n\n    const productList = useSelector( state => state.productList)\n    const {loading, error, products, page, pages} = productList\n\n    const productDelete = useSelector( state => state.productDelete)\n    const {loading : loadingDelete, error: errorDelete, success: successDelete} = productDelete\n\n    const userLogin = useSelector(state => state.userLogin)\n    const {userInfo} = userLogin\n\n    const productCreate = useSelector(state => state.productCreate)\n    const {loading: loadingCreate, error: errorCreate, success : successCreate, product: createdProduct} = productCreate\n\n    let navigate = useNavigate();\n\n    let location = useLocation()\n    let keyword = location.search\n    useEffect(() => {\n        dispatch({type : PRODUCT_CREATE_RESET})\n\n        if(!userInfo.isAdmin)\n        {\n            navigate('/login')\n        }\n\n        if(successCreate){\n            navigate(`/admin/product/${createdProduct.id}/edit`)\n        }else{\n            dispatch(listProducts(keyword))\n        }\n    }, [dispatch, userInfo,successDelete, successCreate, createdProduct, keyword])\n  \n\n  const deleteHandler = (id) => {\n    if (window.confirm('Are you sure you want to delete this product?')) {\n        dispatch(deleteProduct(id))\n    }\n    \n  }\n\n  const createProductHandler = () => {\n    dispatch(createProduct())\n  }\n\n\n    return (\n    <div>\n        <Row className = 'align-items-center'>\n            <Col>\n                <h1>Products</h1>\n            </Col>\n            \n            <Col className = 'text-right'>\n                <Button className = 'my-3' onClick = {createProductHandler}>\n                    <i className = 'fas fa-plus'></i> Create Product\n                </Button>\n\n            </Col>\n\n        </Row>\n\n        {loadingDelete && <Loader />}\n        {errorDelete && <Message variant = 'danger'>{errorDelete}</Message>}\n        \n        \n        {loadingCreate && <Loader />}\n        {errorCreate && <Message variant = 'danger'>{errorCreate}</Message>}\n\n        \n        {loading\n        ? (<Loader />)\n        : error\n            ? (<Message variant = 'danger'> {error}</Message>)\n            : (\n                <div>\n                <Table striped bordered hover responsive className=\"table-sm\">\n                    <thead>\n                        <tr>\n                            <th>ID</th>\n                            <th>NAME</th>\n                            <th>PRICE</th>\n                            <th>CATEGORY</th>\n                            <th>BRAND</th>\n                            <th></th>\n                        </tr>\n                    </thead>\n\n                    <tbody>\n                        {products.map(product => (\n                            <tr key = {product.id}>\n                                <td>{product.id}</td>\n                                <td>{product.name}</td>\n                                <td>${product.price}</td>\n                                <td>{product.category}</td>\n                                <td>{product.brand}</td>\n\n                                <td>\n                                    <LinkContainer to = {`/admin/product/${product.id}/edit`}>\n                                        <Button variant = 'light' className = 'btn-sm'> \n                                        <i className=\"fas fa-edit\"></i>\n                                        </Button>\n                                    </LinkContainer>\n\n                                    <Button variant = 'danger' className = 'btn-sm' onClick = {() => deleteHandler(product.id)}> \n                                        <i className=\"fas fa-trash\"></i>\n                                    </Button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n\n                </Table>\n                <Paginate pages={pages} page={page}  isAdmin={true} />\n                </div>\n            )\n        }\n    </div>\n  )\n}\n\nexport default ProductListScreen","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/screens/ProductEditScreen.js",["271","272"],[],"import { useEffect, useState } from \"react\"\nimport React from 'react'\nimport axios from 'axios'\nimport {Link,useLocation, useNavigate, useParams} from 'react-router-dom'\nimport {Form, Button,Image } from 'react-bootstrap'\nimport { useDispatch, useSelector } from \"react-redux\"\nimport Loader from \"../components/Loader\";\nimport Message from \"../components/Message\";\nimport FormContainer from \"../components/FormContainer\";\nimport {listProductDetails, updateProduct} from '../actions/productActions'\nimport {PRODUCT_UPDATE_RESET} from '../constants/productConstants'\n\n\nfunction ProductEditScreen() {\n\n    const {id} = useParams()\n    \n    let navigate = useNavigate();\n    const [name, setName] = useState('')\n    const [price, setPrice] = useState(0)\n    const [image, setImage] = useState('')\n    const [brand, setBrand] = useState('')\n    const [category, setCategory] = useState('')\n    const [countInStock, setCountInStock] = useState(0)\n    const [description, setDescription] = useState('')\n    const [uploading, setUploading] = useState(false)\n\n    const dispatch = useDispatch()\n\n    const productDetails = useSelector(state => state.productDetails)\n    const { error, loading, product } = productDetails\n\n    const productUpdate = useSelector(state => state.productUpdate)\n    const { error: errorUpdate, loading: loadingUpdate, success: successUpdate } = productUpdate\n\n\n    useEffect(() => {\n\n        if (successUpdate) {\n            dispatch({ type: PRODUCT_UPDATE_RESET })\n            navigate('/admin/productlist')\n        } else {\n            if (!product.name || product.id !== Number(id)) {\n                dispatch(listProductDetails(id))\n            } else {\n                setName(product.name)\n                setPrice(product.price)\n                setImage(product.image)\n                setBrand(product.brand)\n                setCategory(product.category)\n                setCountInStock(product.countInStock)\n                setDescription(product.description)\n\n            }\n        }\n\n\n\n    }, [dispatch, product, id, successUpdate])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(updateProduct({\n            id: id,\n            name,\n            price,\n            image,\n            brand,\n            category,\n            countInStock,\n            description\n        }))\n    }\n\n    const uploadFileHandler = async (e) => {\n        const file = e.target.files[0]\n        const formData = new FormData()\n\n        formData.append('image', file)\n        formData.append('product_id',id)\n\n        setUploading(true)\n\n        try {\n            const config = {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                }\n            }\n\n            const { data } = await axios.post('/api/products/upload/', formData, config)\n\n\n            setImage(data)\n            setUploading(false)\n\n        } catch (error) {\n            setUploading(false)\n        }\n    }\n\n    return (\n        <div>\n            <Link to='/admin/productlist'>\n                Go Back\n            </Link>\n\n            <FormContainer>\n                <h1>Edit Product</h1>\n                {loadingUpdate && <Loader />}\n                {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n\n                {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message>\n                    : (\n                        <Form onSubmit={submitHandler}>\n\n                            <Form.Group controlId='name' className = 'py-3'>\n                                <Form.Label>Name</Form.Label>\n                                <Form.Control\n\n                                    type='name'\n                                    placeholder='Enter name'\n                                    value={name}\n                                    onChange={(e) => setName(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId='price' className = 'py-3'>\n                                <Form.Label>Price</Form.Label>\n                                <Form.Control\n\n                                    type='number'\n                                    placeholder='Enter price'\n                                    value={price}\n                                    onChange={(e) => setPrice(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId='image-thumbnail' className = 'py-3'>\n                                {/* <Form.Label>Price</Form.Label> */}\n                                <Image src = {product.image} alt = {product.name} fluid/>\n                            </Form.Group>\n\n                            <Form.Group controlId='image' className = 'py-3'>\n                                <Form.Label>Image</Form.Label>\n                                {/* <Form.Control\n                                    type='text'\n                                    placeholder='Enter image'\n                                    value={image}\n                                    onChange={(e) => setImage(e.target.value)}\n                                >\n                                </Form.Control> */}\n\n                                <Form.Control\n                                    type = 'file'\n                                    // id='image-file'\n                                    label='Choose File'\n                                    // custom\n                                    onChange={uploadFileHandler}\n                                />\n\n                                {/* </Form.Control> */}\n\n                                {uploading && <Loader />}\n\n                            </Form.Group>\n\n\n                            <Form.Group controlId='brand' className = 'py-3'>\n                                <Form.Label>Brand</Form.Label>\n                                <Form.Control\n\n                                    type='text'\n                                    placeholder='Enter brand'\n                                    value={brand}\n                                    onChange={(e) => setBrand(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId='countinstock' className = 'py-3'>\n                                <Form.Label>Stock</Form.Label>\n                                <Form.Control\n\n                                    type='number'\n                                    placeholder='Enter stock'\n                                    value={countInStock}\n                                    onChange={(e) => setCountInStock(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId='category' className = 'py-3'>\n                                <Form.Label>Category</Form.Label>\n                                <Form.Control\n\n                                    type='text'\n                                    placeholder='Enter category'\n                                    value={category}\n                                    onChange={(e) => setCategory(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId='description' className = 'py-3'>\n                                <Form.Label>Description</Form.Label>\n                                <Form.Control\n\n                                    type='text'\n                                    placeholder='Enter description'\n                                    value={description}\n                                    onChange={(e) => setDescription(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n\n                            <Button type='submit' variant='primary'>\n                                Update\n                        </Button>\n\n                        </Form>\n                    )}\n\n            </FormContainer >\n        </div>\n\n    )\n}\n\nexport default ProductEditScreen","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/screens/UserEditScreen.js",["273","274"],[],"import { useEffect, useState } from \"react\"\nimport React from 'react'\nimport {Link,useLocation, useNavigate, useParams} from 'react-router-dom'\nimport {Form, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from \"react-redux\"\nimport Loader from \"../components/Loader\";\nimport Message from \"../components/Message\";\nimport FormContainer from \"../components/FormContainer\";\nimport {getUserDetails, updateUser} from '../actions/userActions'\nimport {USER_UPDATE_RESET} from '../constants/userConstants'\n\nfunction UserEditScreen() {\n\n\n    const {id} = useParams()\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [isAdmin, setIsAdmin] = useState(false)\n    \n    const dispatch = useDispatch()\n    \n    const userDetails = useSelector(state => state.userDetails)\n    const {error, user, loading} = userDetails\n\n\n    const userUpdate = useSelector(state => state.userUpdate)\n    const {error : errorUpdate, loading : loadingUpdate, success : successUpdate} = userUpdate\n\n    let navigate = useNavigate();\n\n    useEffect(() => {\n        if(successUpdate){\n            dispatch({type : USER_UPDATE_RESET})\n            navigate('/admin/userlist')\n        }\n        else{\n            if(!user.name || user.id !== Number(id)){\n                dispatch(getUserDetails(id))\n            }\n            else{\n                setName(user.name)\n                setEmail(user.email)\n                setIsAdmin(user.isAdmin)\n            }\n        }\n    \n    }, [id, user, successUpdate])\n\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(updateUser({id : user.id, name, email, isAdmin}))\n\n    }\n\n\n\n  return (\n    <div>\n        <Link to = '/admin/userlist'>\n            Go Back\n        </Link>\n        \n        <FormContainer>\n            <h1>Edit User</h1>\n            {loadingUpdate && <Loader/>}\n            {errorUpdate && <Message variant = 'danger'>{errorUpdate}</Message>}\n            \n            {loading ? (<Loader />) \n                    : error ? (<Message variant = 'danger'>{error}</Message>)\n                            : (\n                                <Form onSubmit = {submitHandler}>\n\n                                <Form.Group controlId = 'name' className = 'py-3'>\n                                        <Form.Label>Name</Form.Label>\n                                        <Form.Control\n                                        type = 'name'\n                                        placeholder = 'Enter Name'\n                                        value = {name}\n                                        onChange = {(e) => setName(e.target.value)}\n                                        >\n                                        </Form.Control>\n                                </Form.Group>\n                    \n                                <Form.Group controlId = 'email' className = 'py-3'>\n                                        <Form.Label>Email Address</Form.Label>\n                                        <Form.Control\n                                        type = 'email'\n                                        placeholder = 'Enter Email'\n                                        value = {email}\n                                        onChange = {(e) => setEmail(e.target.value)}\n                                        >\n                                        </Form.Control>\n                                </Form.Group>\n                                \n                    \n                                <Form.Group controlId = 'isadmin' \n                                className = 'py-3'\n                                >\n                                    <Form.Check\n                                    \n                                    type = 'checkbox'\n                                    label = 'Is Admin'\n                                    checked = {isAdmin}\n                                    onChange = {(e) => setIsAdmin(e.target.checked)}\n                                    >\n                    \n                                    </Form.Check>\n                                </Form.Group>\n                    \n                    \n                                <Button\n                                        type = 'submit'\n                                        variant = 'primary'\n                                        className = 'py-3'\n                                    >\n                                        Update\n                                </Button>\n                                </Form>\n            )}\n            \n        </FormContainer>\n    </div>\n  )\n}\n\nexport default UserEditScreen","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/components/Paginate.js",[],[],"/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/components/SearchBox.js",[],[],"/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/components/Loader.js",[],[],"/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/components/Message.js",[],[],"/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/components/Product.js",[],[],"/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/components/ProductCarousel.js",[],[],"/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/constants/productConstants.js",[],[],"/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/constants/userConstants.js",[],[],"/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/constants/cartConstants.js",[],[],"/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/constants/orderConstants.js",[],[],"/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/components/Rating.js",[],[],"/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/components/FormContainer.js",[],[],"/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/actions/userActions.js",["275","276"],[],"import axios from 'axios'\n\nimport { USER_LOGIN_REQUEST,\n    USER_LOGIN_SUCCESS,\n    USER_LOGIN_FAIL,\n\n    USER_LOGOUT,\n\n    USER_REGISTER_REQUEST,\n    USER_REGISTER_SUCCESS,\n    USER_REGISTER_FAIL,\n\n    USER_DETAILS_REQUEST,\n    USER_DETAILS_SUCCESS,\n    USER_DETAILS_FAIL,\n    USER_DETAILS_RESET,\n\n\n    USER_UPDATE_PROFILE_REQUEST,\n    USER_UPDATE_PROFILE_SUCCESS,\n    USER_UPDATE_PROFILE_FAIL,\n    USER_UPDATE_PROFILE_RESET,\n\n    USER_LIST_REQUEST,\n    USER_LIST_SUCCESS,\n    USER_LIST_FAIL,\n    USER_LIST_RESET,\n\n    USER_DELETE_REQUEST,\n    USER_DELETE_SUCCESS,\n    USER_DELETE_FAIL,\n\n    USER_UPDATE_REQUEST,\n    USER_UPDATE_SUCCESS,\n    USER_UPDATE_FAIL,\n    USER_UPDATE_RESET,\n\n} from \"../constants/userConstants\";\n\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants'\n\n\nexport const login = (email,password) => async (dispatch) => {\n    try {\n        dispatch({\n            type : USER_LOGIN_REQUEST\n\n        })\n\n        const config = {\n            headers : {\n                'Content-type':'application/json'\n            }\n        }\n\n        const {data} = await axios.post(\n            '/api/users/login/',\n            {'username':email, 'password' : password},\n            config\n            )\n\n        dispatch({\n            type : USER_LOGIN_SUCCESS,\n            payload : data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n    }catch(error){\n\n        dispatch({\n            type : USER_LOGIN_FAIL,\n            payload : error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n         })\n    }\n}\n\nexport const logout = () => (dispatch) => {\n    localStorage.removeItem('userInfo')\n    dispatch({type : USER_LOGOUT})\n    dispatch({ type: USER_DETAILS_RESET })\n    dispatch({ type: ORDER_LIST_MY_RESET })\n    dispatch({type : USER_LIST_RESET})\n} \n\n\nexport const register = (name, email,password) => async (dispatch) => {\n    try {\n        dispatch({\n            type : USER_REGISTER_REQUEST\n\n        })\n\n        const config = {\n            headers : {\n                'Content-type':'application/json'\n            }\n        }\n\n        const {data} = await axios.post(\n            '/api/users/register/',\n            {'name' : name, 'email':email, 'password' : password},\n            config\n            )\n\n        dispatch({\n            type : USER_REGISTER_SUCCESS,\n            payload : data\n        })\n        dispatch({\n            type : USER_LOGIN_SUCCESS,\n            payload : data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n    }catch(error){\n\n        dispatch({\n            type : USER_REGISTER_FAIL,\n            payload : error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n         })\n    }\n}\n\n\n\n\nexport const getUserDetails = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_DETAILS_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `/api/users/${id}/`,\n            config\n        )\n\n        dispatch({\n            type: USER_DETAILS_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: USER_DETAILS_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n \n\n\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_UPDATE_PROFILE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.put(\n            `/api/users/profile/update/`,\n            user,\n            config\n        )\n\n        dispatch({\n            type: USER_UPDATE_PROFILE_SUCCESS,\n            payload: data\n        })\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n    } catch (error) {\n        dispatch({\n            type: USER_UPDATE_PROFILE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n \n \n\n\n\nexport const listUsers = () => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_LIST_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `/api/users/`,\n            config\n        )\n\n        dispatch({\n            type: USER_LIST_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: USER_LIST_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\n\nexport const deleteUser = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_DELETE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.delete(\n            `/api/users/delete/${id}/`,\n            config\n        )\n\n        dispatch({\n            type: USER_DELETE_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: USER_DELETE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\n\n\nexport const updateUser = (user) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_UPDATE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.put(\n            `/api/users/update/${user.id}/`,\n            user,\n            config\n        )\n\n        dispatch({\n            type: USER_UPDATE_SUCCESS,\n        })\n\n        dispatch({\n            type: USER_DETAILS_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: USER_UPDATE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/actions/productActions.js",["277"],[],"import axios from 'axios'\nimport {\n    PRODUCT_LIST_REQUEST,\n    PRODUCT_LIST_SUCCESS,\n    PRODUCT_LIST_FAIL,\n\n    PRODUCT_DETAILS_REQUEST,\n    PRODUCT_DETAILS_SUCCESS,\n    PRODUCT_DETAILS_FAIL,\n\n    PRODUCT_DELETE_REQUEST,\n    PRODUCT_DELETE_SUCCESS,\n    PRODUCT_DELETE_FAIL,\n\n    PRODUCT_CREATE_REQUEST,\n    PRODUCT_CREATE_SUCCESS,\n    PRODUCT_CREATE_FAIL,\n\n    PRODUCT_UPDATE_REQUEST,\n    PRODUCT_UPDATE_SUCCESS,\n    PRODUCT_UPDATE_FAIL,\n\n    PRODUCT_CREATE_REVIEW_REQUEST,\n    PRODUCT_CREATE_REVIEW_SUCCESS,\n    PRODUCT_CREATE_REVIEW_FAIL,\n\n\n    PRODUCT_TOP_REQUEST,\n    PRODUCT_TOP_SUCCESS,\n    PRODUCT_TOP_FAIL,\n\n} from '../constants/productConstants'\n\nexport const listProducts = (keyword = '') => async (dispatch) => {\n    try{\n        dispatch({type : PRODUCT_LIST_REQUEST})\n\n        const { data } = await axios.get(`/api/products${keyword}`)\n        \n        dispatch({\n            type : PRODUCT_LIST_SUCCESS,\n            payload : data\n        })\n    }\n    catch(error){\n         dispatch({\n            type : PRODUCT_LIST_FAIL,\n            payload : error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n         })\n    }\n}\n\n\n\n\n\nexport const listTopProducts = () => async (dispatch) => {\n    try {\n        dispatch({ type: PRODUCT_TOP_REQUEST })\n\n        const { data } = await axios.get(`/api/products/top/`)\n\n        dispatch({\n            type: PRODUCT_TOP_SUCCESS,\n            payload: data\n        })\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_TOP_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const listProductDetails = (id) => async (dispatch) => {\n    try{\n        dispatch({type : PRODUCT_DETAILS_REQUEST})\n\n        const { data } = await axios.get(`/api/products/${id}`);\n        dispatch({\n            type : PRODUCT_DETAILS_SUCCESS,\n            payload : data\n        })\n    }\n    catch(error){\n         dispatch({\n            type : PRODUCT_DETAILS_FAIL,\n            payload : error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n         })\n    }\n}\n\n\n\n\n\nexport const deleteProduct = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: PRODUCT_DELETE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.delete(\n            `/api/products/delete/${id}/`,\n            config\n        )\n\n        dispatch({\n            type: PRODUCT_DELETE_SUCCESS,\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_DELETE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\n\nexport const createProduct = () => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: PRODUCT_CREATE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.post(\n            `/api/products/create/`,\n            {},\n            config\n        )\n        dispatch({\n            type: PRODUCT_CREATE_SUCCESS,\n            payload: data,\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_CREATE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\n\nexport const updateProduct = (product) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: PRODUCT_UPDATE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.put(\n            `/api/products/update/${product.id}/`,\n            product,\n            config\n        )\n        dispatch({\n            type: PRODUCT_UPDATE_SUCCESS,\n            payload: data,\n        })\n\n\n        dispatch({\n            type: PRODUCT_DETAILS_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_UPDATE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\n\n\nexport const createProductReview = (productId, review) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: PRODUCT_CREATE_REVIEW_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.post(\n            `/api/products/${productId}/reviews/`,\n            review,\n            config\n        )\n        dispatch({\n            type: PRODUCT_CREATE_REVIEW_SUCCESS,\n            payload: data,\n        })\n\n\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_CREATE_REVIEW_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/actions/orderActions.js",["278","279","280"],[],"import axios from 'axios'\nimport {\n    ORDER_CREATE_REQUEST,\n    ORDER_CREATE_SUCCESS,\n    ORDER_CREATE_FAIL,\n\n    ORDER_DETAILS_REQUEST,\n    ORDER_DETAILS_SUCCESS,\n    ORDER_DETAILS_FAIL,\n\n    ORDER_PAY_REQUEST,\n    ORDER_PAY_SUCCESS,\n    ORDER_PAY_FAIL,\n    ORDER_PAY_RESET,\n\n    ORDER_LIST_MY_REQUEST,\n    ORDER_LIST_MY_SUCCESS,\n    ORDER_LIST_MY_FAIL,\n    ORDER_LIST_MY_RESET,\n\n    ORDER_LIST_REQUEST,\n    ORDER_LIST_SUCCESS,\n    ORDER_LIST_FAIL,\n\n    ORDER_DELIVER_REQUEST,\n    ORDER_DELIVER_SUCCESS,\n    ORDER_DELIVER_FAIL,\n    ORDER_DELIVER_RESET,\n} from '../constants/orderConstants'\n\n\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants'\n\n\nexport const createOrder = (order) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type:ORDER_CREATE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.post(\n            '/api/orders/add/',\n            order,\n            config\n        )\n\n        dispatch({\n            type: ORDER_CREATE_SUCCESS,\n            payload: data\n        })\n\n        dispatch({\n            type: CART_CLEAR_ITEMS,\n            payload: data\n        })\n\n        localStorage.removeItem('cartItems')\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_CREATE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n \n\n\n\n\nexport const getOrderDetails = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_DETAILS_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `/api/orders/${id}/`,\n            config\n        )\n\n        dispatch({\n            type: ORDER_DETAILS_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_DETAILS_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\n\nexport const payOrder = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_PAY_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.put(\n            `/api/orders/${id}/pay/`,\n            {},\n            config\n        )\n\n        dispatch({\n            type: ORDER_PAY_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_PAY_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\n\nexport const listMyOrders = () => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_LIST_MY_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `/api/orders/myorders/`,\n            config\n        )\n\n        dispatch({\n            type: ORDER_LIST_MY_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_LIST_MY_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\n\nexport const listOrders = () => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_LIST_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `/api/orders/`,\n            config\n        )\n\n        dispatch({\n            type: ORDER_LIST_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_LIST_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\n\n\n\nexport const deliverOrder = (order) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_DELIVER_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.put(\n            `/api/orders/${order.id}/deliver/`,\n            {},\n            config\n        )\n\n        dispatch({\n            type: ORDER_DELIVER_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_DELIVER_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n","/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/actions/cartActions.js",[],[],"/Users/mac/Desktop/react_portfolio/react-portfolio-website-1/backend/frontend/src/components/CheckoutSteps.js",[],[],{"ruleId":"281","severity":1,"message":"282","line":3,"column":34,"nodeType":"283","messageId":"284","endLine":3,"endColumn":37},{"ruleId":"281","severity":1,"message":"285","line":1,"column":17,"nodeType":"283","messageId":"284","endLine":1,"endColumn":25},{"ruleId":"281","severity":1,"message":"286","line":8,"column":8,"nodeType":"283","messageId":"284","endLine":8,"endColumn":19},{"ruleId":"287","severity":1,"message":"288","line":49,"column":8,"nodeType":"289","endLine":49,"endColumn":40,"suggestions":"290"},{"ruleId":"291","severity":1,"message":"292","line":153,"column":78,"nodeType":"293","messageId":"294","endLine":153,"endColumn":80},{"ruleId":"281","severity":1,"message":"295","line":3,"column":9,"nodeType":"283","messageId":"284","endLine":3,"endColumn":13},{"ruleId":"281","severity":1,"message":"296","line":3,"column":14,"nodeType":"283","messageId":"284","endLine":3,"endColumn":25},{"ruleId":"281","severity":1,"message":"297","line":8,"column":8,"nodeType":"283","messageId":"284","endLine":8,"endColumn":21},{"ruleId":"287","severity":1,"message":"298","line":58,"column":8,"nodeType":"289","endLine":58,"endColumn":43,"suggestions":"299"},{"ruleId":"291","severity":1,"message":"300","line":64,"column":21,"nodeType":"293","messageId":"294","endLine":64,"endColumn":23},{"ruleId":"281","severity":1,"message":"285","line":1,"column":21,"nodeType":"283","messageId":"284","endLine":1,"endColumn":29},{"ruleId":"281","severity":1,"message":"296","line":3,"column":9,"nodeType":"283","messageId":"284","endLine":3,"endColumn":20},{"ruleId":"287","severity":1,"message":"301","line":38,"column":4,"nodeType":"289","endLine":38,"endColumn":13,"suggestions":"302"},{"ruleId":"281","severity":1,"message":"303","line":1,"column":10,"nodeType":"283","messageId":"284","endLine":1,"endColumn":19},{"ruleId":"281","severity":1,"message":"296","line":3,"column":9,"nodeType":"283","messageId":"284","endLine":3,"endColumn":20},{"ruleId":"281","severity":1,"message":"285","line":1,"column":21,"nodeType":"283","messageId":"284","endLine":1,"endColumn":29},{"ruleId":"281","severity":1,"message":"296","line":3,"column":9,"nodeType":"283","messageId":"284","endLine":3,"endColumn":20},{"ruleId":"281","severity":1,"message":"304","line":6,"column":9,"nodeType":"283","messageId":"284","endLine":6,"endColumn":21},{"ruleId":"287","severity":1,"message":"305","line":82,"column":4,"nodeType":"289","endLine":82,"endColumn":53,"suggestions":"306"},{"ruleId":"287","severity":1,"message":"307","line":45,"column":8,"nodeType":"289","endLine":45,"endColumn":28,"suggestions":"308"},{"ruleId":"291","severity":1,"message":"300","line":51,"column":21,"nodeType":"293","messageId":"294","endLine":51,"endColumn":23},{"ruleId":"287","severity":1,"message":"298","line":34,"column":8,"nodeType":"289","endLine":34,"endColumn":28,"suggestions":"309"},{"ruleId":"281","severity":1,"message":"310","line":4,"column":51,"nodeType":"283","messageId":"284","endLine":4,"endColumn":55},{"ruleId":"281","severity":1,"message":"303","line":1,"column":10,"nodeType":"283","messageId":"284","endLine":1,"endColumn":19},{"ruleId":"281","severity":1,"message":"296","line":3,"column":9,"nodeType":"283","messageId":"284","endLine":3,"endColumn":20},{"ruleId":"281","severity":1,"message":"285","line":1,"column":21,"nodeType":"283","messageId":"284","endLine":1,"endColumn":29},{"ruleId":"281","severity":1,"message":"296","line":3,"column":9,"nodeType":"283","messageId":"284","endLine":3,"endColumn":20},{"ruleId":"281","severity":1,"message":"297","line":8,"column":8,"nodeType":"283","messageId":"284","endLine":8,"endColumn":21},{"ruleId":"281","severity":1,"message":"295","line":9,"column":9,"nodeType":"283","messageId":"284","endLine":9,"endColumn":13},{"ruleId":"287","severity":1,"message":"298","line":35,"column":8,"nodeType":"289","endLine":35,"endColumn":41,"suggestions":"311"},{"ruleId":"281","severity":1,"message":"285","line":1,"column":21,"nodeType":"283","messageId":"284","endLine":1,"endColumn":29},{"ruleId":"281","severity":1,"message":"296","line":3,"column":9,"nodeType":"283","messageId":"284","endLine":3,"endColumn":20},{"ruleId":"281","severity":1,"message":"297","line":8,"column":8,"nodeType":"283","messageId":"284","endLine":8,"endColumn":21},{"ruleId":"281","severity":1,"message":"295","line":9,"column":9,"nodeType":"283","messageId":"284","endLine":9,"endColumn":13},{"ruleId":"287","severity":1,"message":"298","line":31,"column":8,"nodeType":"289","endLine":31,"endColumn":27,"suggestions":"312"},{"ruleId":"281","severity":1,"message":"285","line":1,"column":21,"nodeType":"283","messageId":"284","endLine":1,"endColumn":29},{"ruleId":"281","severity":1,"message":"297","line":8,"column":8,"nodeType":"283","messageId":"284","endLine":8,"endColumn":21},{"ruleId":"281","severity":1,"message":"295","line":9,"column":9,"nodeType":"283","messageId":"284","endLine":9,"endColumn":13},{"ruleId":"287","severity":1,"message":"298","line":47,"column":8,"nodeType":"289","endLine":47,"endColumn":82,"suggestions":"313"},{"ruleId":"281","severity":1,"message":"296","line":4,"column":14,"nodeType":"283","messageId":"284","endLine":4,"endColumn":25},{"ruleId":"287","severity":1,"message":"298","line":59,"column":8,"nodeType":"289","endLine":59,"endColumn":46,"suggestions":"314"},{"ruleId":"281","severity":1,"message":"296","line":3,"column":14,"nodeType":"283","messageId":"284","endLine":3,"endColumn":25},{"ruleId":"287","severity":1,"message":"315","line":48,"column":8,"nodeType":"289","endLine":48,"endColumn":33,"suggestions":"316"},{"ruleId":"281","severity":1,"message":"317","line":22,"column":5,"nodeType":"283","messageId":"284","endLine":22,"endColumn":30},{"ruleId":"281","severity":1,"message":"318","line":36,"column":5,"nodeType":"283","messageId":"284","endLine":36,"endColumn":22},{"ruleId":"281","severity":1,"message":"319","line":122,"column":17,"nodeType":"283","messageId":"284","endLine":122,"endColumn":21},{"ruleId":"281","severity":1,"message":"320","line":14,"column":5,"nodeType":"283","messageId":"284","endLine":14,"endColumn":20},{"ruleId":"281","severity":1,"message":"321","line":19,"column":5,"nodeType":"283","messageId":"284","endLine":19,"endColumn":24},{"ruleId":"281","severity":1,"message":"322","line":28,"column":5,"nodeType":"283","messageId":"284","endLine":28,"endColumn":24},"no-unused-vars","'Row' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useNavigate' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["323"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Link' is defined but never used.","'useLocation' is defined but never used.","'FormContainer' is defined but never used.","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["324"],"Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'cart.paymentMethod', 'dispatch', 'navigate', and 'order.id'. Either include them or remove the dependency array.",["325"],"'useEffect' is defined but never used.","'PayPalButton' is defined but never used.","React Hook useEffect has missing dependencies: 'navigate' and 'userInfo'. Either include them or remove the dependency array.",["326"],"React Hook useEffect has missing dependencies: 'navigate' and 'userInfoRegister'. Either include them or remove the dependency array.",["327"],["328"],"'Card' is defined but never used.",["329"],["330"],["331"],["332"],"React Hook useEffect has missing dependencies: 'dispatch' and 'navigate'. Either include them or remove the dependency array.",["333"],"'USER_UPDATE_PROFILE_RESET' is defined but never used.","'USER_UPDATE_RESET' is defined but never used.","'data' is assigned a value but never used.","'ORDER_PAY_RESET' is defined but never used.","'ORDER_LIST_MY_RESET' is defined but never used.","'ORDER_DELIVER_RESET' is defined but never used.",{"desc":"334","fix":"335"},{"desc":"336","fix":"337"},{"desc":"338","fix":"339"},{"desc":"340","fix":"341"},{"desc":"342","fix":"343"},{"desc":"344","fix":"345"},{"desc":"346","fix":"347"},{"desc":"348","fix":"349"},{"desc":"350","fix":"351"},{"desc":"352","fix":"353"},{"desc":"354","fix":"355"},"Update the dependencies array to be: [dispatch, id, successProductReview]",{"range":"356","text":"357"},"Update the dependencies array to be: [dispatch, user, userInfo, success, navigate]",{"range":"358","text":"359"},"Update the dependencies array to be: [cart.paymentMethod, dispatch, navigate, order.id, success]",{"range":"360","text":"361"},"Update the dependencies array to be: [dispatch, order, id, successPay, successDeliver, userInfo, navigate]",{"range":"362","text":"363"},"Update the dependencies array to be: [userInfo, redirect, userInfoRegister, navigate]",{"range":"364","text":"365"},"Update the dependencies array to be: [userInfo, redirect, navigate]",{"range":"366","text":"367"},"Update the dependencies array to be: [dispatch, navigate, successDelete, userInfo]",{"range":"368","text":"369"},"Update the dependencies array to be: [dispatch, navigate, userInfo]",{"range":"370","text":"371"},"Update the dependencies array to be: [dispatch, userInfo, successDelete, successCreate, createdProduct, keyword, navigate]",{"range":"372","text":"373"},"Update the dependencies array to be: [dispatch, product, id, successUpdate, navigate]",{"range":"374","text":"375"},"Update the dependencies array to be: [id, user, successUpdate, dispatch, navigate]",{"range":"376","text":"377"},[1492,1524],"[dispatch, id, successProductReview]",[1968,2003],"[dispatch, user, userInfo, success, navigate]",[1341,1350],"[cart.paymentMethod, dispatch, navigate, order.id, success]",[2439,2488],"[dispatch, order, id, successPay, successDeliver, userInfo, navigate]",[1485,1505],"[userInfo, redirect, userInfoRegister, navigate]",[1042,1062],"[userInfo, redirect, navigate]",[1079,1112],"[dispatch, navigate, successDelete, userInfo]",[962,981],"[dispatch, navigate, userInfo]",[1713,1787],"[dispatch, userInfo, successDelete, successCreate, createdProduct, keyword, navigate]",[2022,2060],"[dispatch, product, id, successUpdate, navigate]",[1505,1530],"[id, user, successUpdate, dispatch, navigate]"]